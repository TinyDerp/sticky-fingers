[manifest]
dump_lua = true
priority = 0
version = "1.0.1"

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
G.FUNCS.deck_info()
end
end
'''
payload = '''
G.FUNCS.deck_info()
end
end
function Card:single_tap()
    if self.area and self.area:can_highlight(self) and self.area == G.hand then
        if (self.area == G.hand) and (G.STATE == G.STATES.HAND_PLAYED) then return end
        if self.highlighted ~= true then 
            self.area:add_to_highlighted(self)
        else
            self.area:remove_from_highlighted(self)
            play_sound('cardSlide2', nil, 0.3)
        end
    end
    if self.area and self.area == G.deck and self.area.cards[1] == self then 
        G.FUNCS.deck_info()
    end
    G.MOBILE_VIBRATION_QUEUE = math.max(G.MOBILE_VIBRATION_QUEUE or 0, 1)
end
function Card:can_long_press()
    if self.area and ((self.area == G.hand) or
    ( self.area == G.deck and self.area.cards[1] == self)) then
        return true
    end
end
function Card:can_hover_on_drag()
    return false
end
function Card:swipe_up()
    G.MOBILE_VIBRATION_QUEUE = math.max(G.MOBILE_VIBRATION_QUEUE or 0, 2)
    if self.area and self.area == G.hand and self.area:can_highlight(self) then
        if (self.area == G.hand) and (G.STATE == G.STATES.HAND_PLAYED) then return end
        if self.highlighted ~= true then 
            self.area:add_to_highlighted(self)
        end
    end
    if not self.ability.consumeable and self.area and self.area == G.pack_cards and G.FUNCS.can_select_card(self) then
        G.FUNCS.use_card({config={ref_table = self}})
        return
    end
    if self.area and ((self.area == G.shop_jokers) or (self.area == G.shop_booster) or (self.area == G.shop_vouchers)) then
        if self.ability.set == 'Booster' and ((self.cost) <= 0 or (self.cost <= G.GAME.dollars - G.GAME.bankrupt_at)) then
            G.FUNCS.use_card({config={ref_table = self}})
            return
        elseif self.ability.set == 'Voucher' and ((self.cost) <= 0 or (self.cost <= G.GAME.dollars - G.GAME.bankrupt_at)) then   
            G.FUNCS.use_card({config={ref_table = self}})
            return
        elseif self.area == G.shop_jokers and G.FUNCS.can_buy(self) then 
            G.FUNCS.buy_from_shop({config = {
                ref_table = self,
                id = 'buy'
            }})
            return
        end
    end
    if self.ability.consumeable and self.area and (self.area == G.consumeables or self.area == G.pack_cards) and self:can_use_consumeable() then 
        G.FUNCS.use_card({config={ref_table = self}})
    end
end
function Card:swipe_down()
    G.MOBILE_VIBRATION_QUEUE = math.max(G.MOBILE_VIBRATION_QUEUE or 0, 3)
    if self.area and self.area:can_highlight(self) then
        if (self.area == G.hand) and (G.STATE == G.STATES.HAND_PLAYED) then return end
        if self.highlighted == true then 
            self.area:remove_from_highlighted(self)
            play_sound('cardSlide2', nil, 0.3)
        end
    end
    if G.FUNCS.can_buy_and_use(self) then 
        G.FUNCS.buy_from_shop({config = {
            ref_table = self,
            id = 'buy_and_use'
        }})
        return
    end
    if self.area and (self.area == G.jokers or self.area == G.consumeables) then
        self:sell_card()
    end
end
'''
position = "at"
target = "card.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
Node.stop_hover(self)
end
'''
payload = '''
Node.stop_hover(self)
end
function Card:simple_touch()
    return false
end
'''
position = "at"
target = "card.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
play_sound('tarot2', 1, 0.4)
used_tarot:juice_up(0.3, 0.5)
return true end }))
end
delay(0.6)
end
end

function Card:can_use_consumeable(any_state, skip_check)
'''
payload = '''
play_sound('tarot2', 1, 0.4)
used_tarot:juice_up(0.3, 0.5)
return true end }))
end
delay(0.6)
end
end

function Card:can_use_consumeable(any_state, skip_check)
    if not self.ability.consumeable then return false end
'''
position = "at"
target = "card.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
elseif self.config.type == 'play' or self.config.type == 'shop' or self.config.type == 'consumeable' then
            card.states.drag.can = false
'''
payload = '''
elseif self.config.type == 'play' or self.config.type == 'shop' or self.config.type == 'consumeable' then
            if (self.config.type == 'shop') or (self.config.type == 'consumeable') then 
                card.states.drag.can = true
            else
                card.states.drag.can = false
            end
'''
position = "at"
target = "cardarea.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.cursor_up.T = {x = x/(G.TILESCALE*G.TILESIZE), y = y/(G.TILESCALE*G.TILESIZE)}
    self.cursor_up.time = G.TIMERS.TOTAL
'''
payload = '''
self.cursor_up.T = {x = x/(G.TILESCALE*G.TILESIZE), y = y/(G.TILESCALE*G.TILESIZE)}
    self.cursor_up.time = G.TIMERS.TOTAL
    self.cursor_up.uptime = G.TIMERS.UPTIME
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.cursor_down.T = {x = x/(G.TILESCALE*G.TILESIZE), y = y/(G.TILESCALE*G.TILESIZE)}
    self.cursor_down.time = G.TIMERS.TOTAL
'''
payload = '''
self.cursor_down.T = {x = x/(G.TILESCALE*G.TILESIZE), y = y/(G.TILESCALE*G.TILESIZE)}
    self.cursor_down.time = G.TIMERS.TOTAL
    self.cursor_down.uptime = G.TIMERS.UPTIME
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.cursor_hover.T.x, self.cursor_hover.T.y =G.CURSOR.T.x, G.CURSOR.T.y
    self.cursor_hover.time = G.TIMERS.TOTAL
'''
payload = '''
self.cursor_hover.T.x, self.cursor_hover.T.y =G.CURSOR.T.x, G.CURSOR.T.y
    self.cursor_hover.time = G.TIMERS.TOTAL
    self.cursor_hover.uptime = G.TIMERS.UPTIME
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.hovering.target:stop_hover()
    end
'''
payload = '''
self.hovering.target:stop_hover()
    end
    if self.is_cursor_down then 
        self.cursor_down.distance = math.max(Vector_Dist(self.cursor_down.T, self.cursor_hover.T), self.cursor_down.distance or 0)
        self.cursor_down.duration = G.TIMERS.UPTIME - self.cursor_down.uptime
        if self.cursor_up.target then
            self.cursor_up.target = nil
        end
    end
    if not self.is_cursor_down then
        if self.cursor_down.target then
            self.cursor_down.target = nil
            self.cursor_down.distance = nil
            self.cursor_down.duration = nil
        end
    end
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
--Process registry clicks
    self:process_registry()
'''
payload = '''
--Process registry clicks
    self:process_registry()
    --The object being dragged
    if not self.dragging.handled and self.cursor_down.duration and (self.cursor_down.duration  > 0.1) then
        create_drag_target_from_card(self.dragging.target)
        self.dragging.handled = true
    end
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.released_on.handled = false
end
            end
'''
payload = '''
self.released_on.handled = false
end
            end
            if self.cursor_down.distance < G.MIN_CLICK_DIST and self.cursor_down.duration < 0.2 then 
                if self.cursor_down.target.states.click.can and not self.touch_control.l_press.target then
                    self.touch_control.s_tap.target = self.cursor_down.target
                    self.touch_control.s_tap.time = self.cursor_up.time - self.cursor_down.time
                    self.touch_control.s_tap.handled = false
                end
            --if not, was the Cursor dragging some other thing?
            elseif self.dragging.prev_target then 
                local releasable = nil
                for _, v in ipairs(self.collision_list) do
                    if v.states.hover.can and (not v.states.drag.is) and (v ~= self.dragging.prev_target) then
                        releasable = v
                        break 
                    end
                end
                if releasable and releasable.states.release_on.can then 
                    self.released_on.target = releasable
                    self.released_on.handled = false
                end
            end
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
--Cursor is currently down
    if not self.cursor_down.handled then 
'''
payload = '''
--Cursor is currently down
    if not self.cursor_down.handled then 
        self.cursor_down.distance = 0
        self.cursor_down.duration = 0
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.hovering = {target = nil, handled = true, prev_target = nil} --The node being hovered this frame
self.released_on = {target = nil, handled = true, prev_target = nil} --The node that the cursor 'Released' on, like letting go of LMB
'''
payload = '''
self.hovering = {target = nil, handled = true, prev_target = nil} --The node being hovered this frame
self.released_on = {target = nil, handled = true, prev_target = nil} --The node that the cursor 'Released' on, like letting go of LMB
--Touch controller
self.touch_control = {s_tap = {target = nil,handled = true}, l_press = {target = nil, handled = true}}
'''
position = "at"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.children.h_popup = nil
end
end
'''
payload = '''
self.children.h_popup = nil
end
end
--Determine touch behaviour
function Node:simple_touch()
    return true
end
function Node:can_long_press() return nil end
function Node:can_hover_on_drag() return true end
'''
position = "at"
target = "engine/node.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.config.h_popup = nil
end
end

function UIElement:release(other)
'''
payload = '''
self.config.h_popup = nil
end
end

function UIElement:release(other)
    if self.config.release_func then 
        self.config.release_func(other)
    end
'''
position = "at"
target = "engine/ui.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
G.FUNCS.tut_next()
end
        G.FUNCS[self.config.button](self)
'''
payload = '''
G.FUNCS.tut_next()
end
        G.FUNCS[self.config.button](self)
        -- G.CONTROLLER.touch_control.only_hover = G.ROOM
'''
position = "at"
target = "engine/ui.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.config.object:draw()
end
    end
'''
payload = '''
self.config.object:draw()
end
    end
    if self.config.pulse_border then
        self.border_pulse_timer = self.border_pulse_timer or G.TIMERS.REAL
        local lw = 2*math.max(0, 0.5*math.cos(6*(G.TIMERS.REAL - self.border_pulse_timer)) + 0.5)
        prep_draw(self, 1)
        love.graphics.scale((1)/(G.TILESIZE))
        love.graphics.setLineWidth(lw + 1)
        love.graphics.setColor(adjust_alpha(G.C.BLACK, 0.2*lw, true))
        self:draw_pixellated_rect('fill', parallax_dist)
        love.graphics.setColor(self.config.colour[4] > 0 and mix_colours(G.C.WHITE, self.config.colour, 0.8) or G.C.WHITE)
        self:draw_pixellated_rect('line', parallax_dist)
        love.graphics.pop()
    end
'''
position = "at"
target = "engine/ui.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
self.ARGS.button_colours[1] = self.config.button_delay and mix_colours(self.config.colour, G.C.L_BLACK, 0.5) or self.config.colour
            self.ARGS.button_colours[2] = (((collided_button.config.hover and collided_button.states.hover.is) or (collided_button.last_clicked and collided_button.last_clicked > G.TIMERS.REAL - 0.1)) and G.C.UI.HOVER or nil)
'''
payload = '''
self.ARGS.button_colours[1] = self.config.button_delay and mix_colours(self.config.colour, G.C.L_BLACK, 0.5) or self.config.colour
            self.ARGS.button_colours[2] = (((collided_button.config.hover and collided_button.states.hover.is and ((not G.CONTROLLER.HID.touch) or G.CONTROLLER.is_cursor_down)) or (collided_button.last_clicked and collided_button.last_clicked > G.TIMERS.REAL - 0.1)) and G.C.UI.HOVER or nil)
'''
position = "at"
target = "engine/ui.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
local temp_blind = AnimatedSprite(0,0,1,1, G.ANIMATION_ATLAS['blind_chips'], v.pos)
temp_blind:define_draw_steps({
{shader = 'dissolve', shadow_height = 0.05},
{shader = 'dissolve'}
})
temp_blind.float = true
temp_blind.states.hover.can = true
temp_blind.states.drag.can = false
          temp_blind.states.collide.can = true
'''
payload = '''
local temp_blind = AnimatedSprite(0,0,1,1, G.ANIMATION_ATLAS['blind_chips'], v.pos)
temp_blind:define_draw_steps({
{shader = 'dissolve', shadow_height = 0.05},
{shader = 'dissolve'}
})
temp_blind.float = true
temp_blind.states.hover.can = true
temp_blind.states.drag.can = false
          temp_blind.states.collide.can = true
          -- temp_blind.touch_collide_tilt = true
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
G.CONTROLLER:snap_to{node = temp_blind}
return true
end)
}))
end
temp_blind.float = true
temp_blind.states.hover.can = true
temp_blind.states.drag.can = false
    temp_blind.states.collide.can = true
'''
payload = '''
G.CONTROLLER:snap_to{node = temp_blind}
return true
end)
}))
end
temp_blind.float = true
temp_blind.states.hover.can = true
temp_blind.states.drag.can = false
    temp_blind.states.collide.can = true
    -- temp_blind.touch_collide_tilt = true
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
card.children.price.alignment.offset.y = card.ability.set == 'Booster' and 0.5 or 0.38

return true
end)
}))
  end
'''
payload = '''
card.children.price.alignment.offset.y = card.ability.set == 'Booster' and 0.5 or 0.38

return true
end)
}))
  end
  function drag_target(args)
    args = args or {}
    args.text = args.text or {'BUY'}
    args.colour = copy_table(args.colour or G.C.UI.TRANSPARENT_DARK)
    args.cover = args.cover or nil
    args.emboss = args.emboss or nil
    args.active_check = args.active_check or (function(other) return true end)
    args.release_func = args.release_func or (function(other) G.DEBUG_VALUE = 'WORKIN' end)
    args.text_colour = copy_table(G.C.WHITE)
    args.uibox_config = {
      align = args.align or 'tli',
      offset = args.offset or {x=0,y=0}, 
      major = args.cover or args.major or nil,
    }
    local drag_area_width =(args.T and args.T.w or args.cover and args.cover.T.w or 0.001) + (args.cover_padding or 0)
    local text_rows = {}
    for k, v in ipairs(args.text) do
      text_rows[#text_rows+1] = {n=G.UIT.R, config={align = "cm", padding = 0.05, maxw = drag_area_width-0.1}, nodes={{n=G.UIT.O, config={object = DynaText({scale = args.scale, string = v, maxw = args.maxw or (drag_area_width-0.1), colours = {args.text_colour},float = true, shadow = true, silent = not args.noisy, 0.7, pop_in = 0, pop_in_rate = 6, rotate = args.rotate or nil})}}}}
    end
    args.DT = UIBox{
      T = {0,0,0,0},
      definition = 
        {n=G.UIT.ROOT, config = {align = 'cm',  args = args, can_collide = true, hover = true, release_func = args.release_func, func = 'check_drag_target_active', minw = drag_area_width, minh = (args.cover and args.cover.T.h or 0.001) + (args.cover_padding or 0), padding = 0.03, r = 0.1, emboss = args.emboss, colour = G.C.CLEAR}, nodes=text_rows}, 
      config = args.uibox_config
    }
    args.DT.attention_text = true
    if G.OVERLAY_TUTORIAL and G.OVERLAY_TUTORIAL.highlights then 
      G.OVERLAY_TUTORIAL.highlights[#G.OVERLAY_TUTORIAL.highlights+1] = args.DT
    end
    G.E_MANAGER:add_event(Event({
      trigger = 'after',
      delay = 0,
      blockable = false,
      blocking = false,
      func = function()
        if not G.CONTROLLER.dragging.target and args.DT then 
          if G.OVERLAY_TUTORIAL and G.OVERLAY_TUTORIAL.highlights then
            for k, v in ipairs(G.OVERLAY_TUTORIAL.highlights) do
              if args.DT == v then 
                table.remove(G.OVERLAY_TUTORIAL.highlights, k)
                break
              end
            end
          end
          args.DT:remove()
          return true
        end
      end
      }))
  end
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
local t3 = {
            n=G.UIT.ROOT, config = {id = 'buy_and_use', ref_table = card, minh = 1.1, padding = 0.1, align = 'cr', colour = G.C.RED, shadow = true, r = 0.08, minw = 1.1, func = 'can_buy_and_use', one_press = true, button = 'buy_from_shop', hover = true, focus_args = {type = 'none'}}, nodes={
'''
payload = '''
local t3 = {
            n=G.UIT.ROOT, config = {id = 'buy_and_use', ref_table = card, minh = 1.1, padding = 0.1, align = 'cr', colour = G.C.RED, shadow = true, r = 0.08, minw = 1.1, func = 'buy_and_use_button_check', one_press = true, button = 'buy_from_shop', hover = true, focus_args = {type = 'none'}}, nodes={
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
}} or {
            n=G.UIT.ROOT, config = {ref_table = card, minw = 1.1, maxw = 1.3, padding = 0.1, align = 'bm', colour = G.C.GOLD, shadow = true, r = 0.08, minh = 0.94, func = 'can_buy', one_press = true, button = 'buy_from_shop', hover = true}, nodes={
'''
payload = '''
}} or {
            n=G.UIT.ROOT, config = {ref_table = card, minw = 1.1, maxw = 1.3, padding = 0.1, align = 'bm', colour = G.C.GOLD, shadow = true, r = 0.08, minh = 0.94, func = 'buy_button_check', one_press = true, button = 'buy_from_shop', hover = true}, nodes={
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
card = card, parent = base_attach, type = 'select',
      func = 'can_select_card', button = 'use_card', card_width = card_width
'''
payload = '''
card = card, parent = base_attach, type = 'select',
      func = 'select_button_check', button = 'use_card', card_width = card_width
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
base_attach.children.buy = G.UIDEF.card_focus_button{
card = card, parent = base_attach, type = 'buy',
      func = 'can_buy', button = 'buy_from_shop', card_width = card_width, buy_and_use = buy_and_use
'''
payload = '''
base_attach.children.buy = G.UIDEF.card_focus_button{
card = card, parent = base_attach, type = 'buy',
      func = 'buy_button_check', button = 'buy_from_shop', card_width = card_width, buy_and_use = buy_and_use
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
card = card, parent = base_attach, type = 'buy_and_use',
        func = 'can_buy_and_use', button = 'buy_from_shop', card_width = card_width
'''
payload = '''
card = card, parent = base_attach, type = 'buy_and_use',
        func = 'buy_and_use_button_check', button = 'buy_from_shop', card_width = card_width
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
elseif card.area and card.area == G.pack_cards then
return {
n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
        {n=G.UIT.R, config={ref_table = card, r = 0.08, padding = 0.1, align = "bm", minw = 0.5*card.T.w - 0.15, maxw = 0.9*card.T.w - 0.15, minh = 0.3*card.T.h, hover = true, shadow = true, colour = G.C.UI.BACKGROUND_INACTIVE, one_press = true, button = 'use_card', func = 'can_select_card'}, nodes={
'''
payload = '''
elseif card.area and card.area == G.pack_cards then
return {
n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
        {n=G.UIT.R, config={ref_table = card, r = 0.08, padding = 0.1, align = "bm", minw = 0.5*card.T.w - 0.15, maxw = 0.9*card.T.w - 0.15, minh = 0.3*card.T.h, hover = true, shadow = true, colour = G.C.UI.BACKGROUND_INACTIVE, one_press = true, button = 'use_card', func = 'select_button_check'}, nodes={
'''
position = "at"
target = "functions/UI_definitions.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
if e.config.ref_table.ability.set ~= 'Joker' or (e.config.ref_table.edition and e.config.ref_table.edition.negative) or #G.jokers.cards < G.jokers.config.card_limit then
e.config.colour = G.C.GREEN
e.config.button = 'use_card'
else
e.config.colour = G.C.UI.BACKGROUND_INACTIVE
e.config.button = nil
end
  end
'''
payload = '''
if e.config.ref_table.ability.set ~= 'Joker' or (e.config.ref_table.edition and e.config.ref_table.edition.negative) or #G.jokers.cards < G.jokers.config.card_limit then
e.config.colour = G.C.GREEN
e.config.button = 'use_card'
else
e.config.colour = G.C.UI.BACKGROUND_INACTIVE
e.config.button = nil
end
  end
  G.FUNCS.can_select_card = function(_card)
    if _card.ability.set ~= 'Joker' or (_card.edition and _card.edition.negative) or #G.jokers.cards < G.jokers.config.card_limit then 
      return true
    end
    return false
  end
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
if e.config.ref_table:can_use_consumeable() then
e.config.colour = G.C.RED
e.config.button = 'use_card'
else
e.config.colour = G.C.UI.BACKGROUND_INACTIVE
e.config.button = nil
end
end

  G.FUNCS.can_select_card = function(e)
'''
payload = '''
if e.config.ref_table:can_use_consumeable() then
e.config.colour = G.C.RED
e.config.button = 'use_card'
else
e.config.colour = G.C.UI.BACKGROUND_INACTIVE
e.config.button = nil
end
end

  G.FUNCS.select_button_check = function(e)
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
G.VIEWING_DECK = nil
  G.SETTINGS.paused = false
'''
payload = '''
G.VIEWING_DECK = nil
  G.SETTINGS.paused = false
  G.CONTROLLER.touch_control.clear_touch = true
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
G.ROOM.jiggle = G.ROOM.jiggle + 1
  G.OVERLAY_MENU:align_to_major()
'''
payload = '''
G.ROOM.jiggle = G.ROOM.jiggle + 1
  G.OVERLAY_MENU:align_to_major()
  G.CONTROLLER.touch_control.clear_touch = true
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
e.UIBox.alignment.offset.y = 0
end
end
end

--Checks if the cost of a non voucher card is greater than what the player can afford and changes the
--buy button visuals accordingly
--
---@param e {}
--**e** Is the UIE that called this function
G.FUNCS.can_buy_and_use = function(e)
    if (((e.config.ref_table.cost > G.GAME.dollars - G.GAME.bankrupt_at) and (e.config.ref_table.cost > 0)) or (not e.config.ref_table:can_use_consumeable())) then
        e.UIBox.states.visible = false
        e.config.colour = G.C.UI.BACKGROUND_INACTIVE
        e.config.button = nil
    else
        if e.config.ref_table.highlighted then
          e.UIBox.states.visible = true
        end
        e.config.colour = G.C.SECONDARY_SET.Voucher
        e.config.button = 'buy_from_shop'
    end
'''
payload = '''
e.UIBox.alignment.offset.y = 0
end
end
end

--Checks if the cost of a non voucher card is greater than what the player can afford and changes the
--buy button visuals accordingly
--
---@param e {}
--**e** Is the UIE that called this function
G.FUNCS.buy_and_use_button_check = function(e)
  if not G.FUNCS.can_buy_and_use(e.config.ref_table) then
      e.UIBox.states.visible = false
      e.config.colour = G.C.UI.BACKGROUND_INACTIVE
      e.config.button = nil
  else
      if e.config.ref_table.highlighted then
        e.UIBox.states.visible = true
      end
      e.config.colour = G.C.SECONDARY_SET.Voucher
      e.config.button = 'buy_from_shop'
  end
end
G.FUNCS.can_buy_and_use = function(_card)
if (((_card.cost > G.GAME.dollars - G.GAME.bankrupt_at) and (_card.cost > 0)) or (not _card:can_use_consumeable())) then
  return false
end
return true
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
e.UIBox.alignment.offset.y = 0
end
    end
'''
payload = '''
e.UIBox.alignment.offset.y = 0
end
    end
  end
end
G.FUNCS.can_buy = function(_card)
if _card.cost > (G.GAME.dollars - G.GAME.bankrupt_at) and (_card.cost > 0) then
  return false
end
return true
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
if (e.config.ref_table.cost > G.GAME.dollars - G.GAME.bankrupt_at) and (e.config.ref_table.cost > 0) then
e.config.colour = G.C.UI.BACKGROUND_INACTIVE
e.config.button = nil
else
        e.config.colour = G.C.ORANGE
        e.config.button = 'buy_from_shop'
    end
    if e.config.ref_parent and e.config.ref_parent.children.buy_and_use then
      if e.config.ref_parent.children.buy_and_use.states.visible then
        e.UIBox.alignment.offset.y = -0.6
      else
        e.UIBox.alignment.offset.y = 0
      end
'''
payload = '''
if (e.config.ref_table.cost > G.GAME.dollars - G.GAME.bankrupt_at) and (e.config.ref_table.cost > 0) then
e.config.colour = G.C.UI.BACKGROUND_INACTIVE
e.config.button = nil
else
      e.UIBox.alignment.offset.y = 0
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
G.hand:sort('desc')
play_sound('paper1')
end

--Checks if the cost of a non voucher card is greater than what the player can afford and changes the
--buy button visuals accordingly
--
---@param e {}
--**e** Is the UIE that called this function
G.FUNCS.can_buy = function(e)
    if (e.config.ref_table.cost > G.GAME.dollars - G.GAME.bankrupt_at) and (e.config.ref_table.cost > 0) then
        e.config.colour = G.C.UI.BACKGROUND_INACTIVE
        e.config.button = nil
'''
payload = '''
G.hand:sort('desc')
play_sound('paper1')
end

--Checks if the cost of a non voucher card is greater than what the player can afford and changes the
--buy button visuals accordingly
--
---@param e {}
--**e** Is the UIE that called this function
G.FUNCS.buy_button_check = function(e)
  if not G.FUNCS.can_buy(e.config.ref_table) then
      e.config.colour = G.C.UI.BACKGROUND_INACTIVE
      e.config.button = nil
  else
      e.config.colour = G.C.ORANGE
      e.config.button = 'buy_from_shop'
  end
  if e.config.ref_parent and e.config.ref_parent.children.buy_and_use then
    if e.config.ref_parent.children.buy_and_use.states.visible then
      e.UIBox.alignment.offset.y = -0.6
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
G.hand:sort('desc')
play_sound('paper1')
end
'''
payload = '''
G.hand:sort('desc')
play_sound('paper1')
end
G.FUNCS.check_drag_target_active = function(e)
  if e.config.args.active_check(e.config.args.card) then
    if (not e.config.pulse_border) or not e.config.args.init then
      e.config.pulse_border = true
      e.config.colour = e.config.args.colour
      e.config.args.text_colour[4] = 1
      e.config.release_func = e.config.args.release_func
    end
  else
    if (e.config.pulse_border) or not e.config.args.init  then 
      e.config.pulse_border = nil
      e.config.colour = adjust_alpha(G.C.L_BLACK, 0.9)
      e.config.args.text_colour[4] = 0.5
      e.config.release_func = nil
    end
  end
  e.config.args.init = true
end
'''
position = "at"
target = "functions/button_callbacks.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = true
pattern = '''
s.created_on_state = state
end
end
end
'''
payload = '''
s.created_on_state = state
end
end
end
function create_drag_target_from_card(_card)
  if _card and G.STAGE == G.STAGES.RUN then
      G.DRAG_TARGETS = G.DRAG_TARGETS or {
          S_buy =         Moveable{T={x = G.jokers.T.x, y = G.jokers.T.y - 0.1, w = G.consumeables.T.x + G.consumeables.T.w - G.jokers.T.x, h = G.jokers.T.h+0.6}},
          S_buy_and_use=  Moveable{T={x = G.deck.T.x + 0.2, y = G.deck.T.y - 5.1, w = G.deck.T.w-0.1, h = 4.5}},
          C_sell =        Moveable{T={x = G.jokers.T.x, y = G.jokers.T.y - 0.2, w = G.jokers.T.w, h = G.jokers.T.h+0.6}},
          J_sell =        Moveable{T={x = G.consumeables.T.x+0.3, y = G.consumeables.T.y - 0.2, w = G.consumeables.T.w-0.3, h = G.consumeables.T.h+0.6}},
          C_use =         Moveable{T={x = G.deck.T.x + 0.2, y = G.deck.T.y - 5.1, w = G.deck.T.w-0.1, h =4.5}},
          P_select =      Moveable{T={x = G.play.T.x, y = G.play.T.y - 2, w = G.play.T.w + 2, h = G.play.T.h + 1}},
      }
      if DTM.config.harder_joker_sell == true then
        G.DRAG_TARGETS.J_sell = Moveable{T={x = G.deck.T.x + 0.2, y = G.deck.T.y - 5.1, w = G.deck.T.w-0.1, h = 4.5}}
      else
        G.DRAG_TARGETS.J_sell = Moveable{T={x = G.consumeables.T.x+0.3, y = G.consumeables.T.y - 0.2, w = G.consumeables.T.w-0.3, h = G.consumeables.T.h+0.6}}
      end
      if _card.area and (_card.area == G.shop_jokers or _card.area == G.shop_vouchers or _card.area == G.shop_booster) then 
          local buy_loc = copy_table(localize((_card.area == G.shop_vouchers and 'ml_redeem_target') or (_card.area == G.shop_booster and 'ml_open_target') or 'ml_buy_target'))
          buy_loc[#buy_loc + 1] = '$'.._card.cost
          drag_target({ cover = G.DRAG_TARGETS.S_buy, colour = adjust_alpha(G.C.GREEN, 0.9), text = buy_loc,
              card = _card,
              active_check = (function(other)
                  return G.FUNCS.can_buy(other)
              end),  
              release_func = (function(other)
                  if other.area == G.shop_jokers and G.FUNCS.can_buy(other) then 
                      if G.OVERLAY_TUTORIAL and G.OVERLAY_TUTORIAL.button_listen == 'buy_from_shop' then
                        G.FUNCS.tut_next()
                      end
                      G.FUNCS.buy_from_shop({config = {
                          ref_table = other,
                          id = 'buy'
                      }})
                      return
                  elseif other.area == G.shop_vouchers and G.FUNCS.can_buy(other) then
                      G.FUNCS.use_card({config={ref_table = other}})
                  elseif other.area == G.shop_booster and G.FUNCS.can_buy(other) then
                      G.FUNCS.use_card({config={ref_table = other}})
                  end
              end)
          })
          if G.FUNCS.can_buy_and_use(_card) then
              local buy_use_loc = copy_table(localize('ml_buy_and_use_target'))
              buy_use_loc[#buy_use_loc + 1] = '$'.._card.cost
              drag_target({ cover = G.DRAG_TARGETS.S_buy_and_use, colour = adjust_alpha(G.C.ORANGE, 0.9),text=buy_use_loc,
              card = _card,
              active_check = (function(other)
                  return G.FUNCS.can_buy_and_use(other)
              end),  
              release_func = (function(other)
                  if G.FUNCS.can_buy_and_use(other) then 
                      G.FUNCS.buy_from_shop({config = {
                          ref_table = other,
                          id = 'buy_and_use'
                      }})
                      return
                  end
              end)
              })
          end
      end
      if _card.area and (_card.area == G.pack_cards) then
          if _card.ability.consumeable and not (_card.ability.set == 'Planet') then
              drag_target({ cover = G.DRAG_TARGETS.C_use, colour = adjust_alpha(G.C.RED, 0.9),text = {localize('b_use')},
                  card = _card,
                  active_check = (function(other)
                      return other:can_use_consumeable()
                  end),  
                  release_func = (function(other)
                      if other:can_use_consumeable() then
                        G.FUNCS.use_card({config={ref_table = other}})
                      end
                  end)
              })
          else 
              drag_target({ cover = G.DRAG_TARGETS.P_select, colour = adjust_alpha(G.C.GREEN, 0.9), text = {localize('b_select')},
                  card = _card,
                  active_check = (function(other)
                      return G.FUNCS.can_select_card(other)
                  end),  
                  release_func = (function(other)
                      if G.FUNCS.can_select_card(other) then 
                          G.FUNCS.use_card({config={ref_table = other}})
                      end
                  end)
              })
          end
      end
      if _card.area and (_card.area == G.jokers or _card.area == G.consumeables) then 
          local sell_loc = copy_table(localize('ml_sell_target'))
          sell_loc[#sell_loc + 1] = '$'..(_card.facing == 'back' and '?' or _card.sell_cost)
          drag_target({ cover = _card.area == G.consumeables and G.DRAG_TARGETS.C_sell or G.DRAG_TARGETS.J_sell, colour = adjust_alpha(G.C.GOLD, 0.9),text = sell_loc,
              card = _card,
              active_check = (function(other)
                  return other:can_sell_card()
              end),    
              release_func = (function(other)
                  G.FUNCS.sell_card{config={ref_table=other}}
              end)
          })
          if _card.area == G.consumeables then
              drag_target({ cover = G.DRAG_TARGETS.C_use, colour = adjust_alpha(G.C.RED, 0.9),text = {localize('b_use')},
              card = _card,
              active_check = (function(other)
                  return other:can_use_consumeable()
              end),
              release_func = (function(other)
                  if other:can_use_consumeable() then
                    G.FUNCS.use_card({config={ref_table = other}})
                    if G.OVERLAY_TUTORIAL and G.OVERLAY_TUTORIAL.button_listen == 'use_card' then
                      G.FUNCS.tut_next()
                    end
                  end
              end)
          })
          end
      end
  end
end
'''
position = "at"
target = "functions/misc_functions.lua"
times = 1
